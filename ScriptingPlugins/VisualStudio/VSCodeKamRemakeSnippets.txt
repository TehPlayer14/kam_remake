{
"Event.OnBeacon":{"prefix":"Event.OnBeacon","body":["procedure OnBeacon(aPlayer: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs when a player places a beacon on the map.\nversion: 6570"},
"Event.OnGroupHungry":{"prefix":"Event.OnGroupHungry","body":["procedure OnGroupHungry(aGroup: Integer) begin","\t$1","end;"],"description":"Occurs when the player would be shown a message about a group being hungry (when they first get hungry, then every 4 minutes after that if there are still hungry group members). Occurs regardless of whether the group has hunger messages enabled or not.\nversion: 6220"},
"Event.OnHouseAfterDestroyed":{"prefix":"Event.OnHouseAfterDestroyed","body":["procedure OnHouseAfterDestroyed(aHouseType: THouseType, aOwner: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs after a house is destroyed and has been completely removed from the game, meaning the area it previously occupied can be used. If you need more information about the house use the !OnHouseDestroyed event.\nversion: 6114"},
"Event.OnHouseBuilt":{"prefix":"Event.OnHouseBuilt","body":["procedure OnHouseBuilt(aHouse: Integer) begin","\t$1","end;"],"description":"Occurs when player has built a house.\nversion: 5057"},
"Event.OnHouseDamaged":{"prefix":"Event.OnHouseDamaged","body":["procedure OnHouseDamaged(aHouse: Integer, aAttacker: Integer) begin","\t$1","end;"],"description":"Occurs when a house is damaged by the enemy soldier. !Attacker is -1 the house was damaged some other way, such as from Actions.!HouseAddDamage.\nversion: 5882"},
"Event.OnHouseDestroyed":{"prefix":"Event.OnHouseDestroyed","body":["procedure OnHouseDestroyed(aHouse: Integer, aDestroyerIndex: Integer) begin","\t$1","end;"],"description":"Occurs when a house is destroyed. If !DestroyerIndex is -1 the house was destroyed some other way, such as from Actions.!HouseDestroy. If !DestroyerIndex is the same as the house owner (States.!HouseOwner), the house was demolished by the player who owns it. Otherwise it was destroyed by an enemy. Called just before the house is destroyed so HouseID is usable only during this event, and the area occupied by the house is still unusable.\nversion: 5407"},
"Event.OnHousePlanPlaced":{"prefix":"Event.OnHousePlanPlaced","body":["procedure OnHousePlanPlaced(aPlayer: Integer, aX: Integer, aY: Integer, aType: THouseType) begin","\t$1","end;"],"description":"Occurs when player has placed a house plan.\nversion: 5871"},
"Event.OnHousePlanRemoved":{"prefix":"Event.OnHousePlanRemoved","body":["procedure OnHousePlanRemoved(aPlayer: Integer, aX: Integer, aY: Integer, aType: THouseType) begin","\t$1","end;"],"description":"Occurs when player has removed a house plan.\nversion: 6298"},
"Event.OnMarketTrade":{"prefix":"Event.OnMarketTrade","body":["procedure OnMarketTrade(aMarket: Integer, aFrom: TWareType, aTo: TWareType) begin","\t$1","end;"],"description":"Occurs when a trade happens in a market (at the moment when resources are exchanged by serfs).\nversion: 6216"},
"Event.OnMissionStart":{"prefix":"Event.OnMissionStart","body":["procedure OnMissionStart() begin","\t$1","end;"],"description":"Occurs immediately after the mission is loaded.\nversion: 5057"},
"Event.OnPlanFieldPlaced":{"prefix":"Event.OnPlanFieldPlaced","body":["procedure OnPlanFieldPlaced(aPlayer: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs when player has placed a field plan.\nversion: 5964"},
"Event.OnPlanFieldRemoved":{"prefix":"Event.OnPlanFieldRemoved","body":["procedure OnPlanFieldRemoved(aPlayer: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs when player has removed a field plan.\nversion: 6301"},
"Event.OnPlanRoadPlaced":{"prefix":"Event.OnPlanRoadPlaced","body":["procedure OnPlanRoadPlaced(aPlayer: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs when player has placed a road plan.\nversion: 5964"},
"Event.OnPlanRoadRemoved":{"prefix":"Event.OnPlanRoadRemoved","body":["procedure OnPlanRoadRemoved(aPlayer: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs when player has removed a road plan.\nversion: 6301"},
"Event.OnPlanWinefieldPlaced":{"prefix":"Event.OnPlanWinefieldPlaced","body":["procedure OnPlanWinefieldPlaced(aPlayer: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs when player has placed a wine field plan.\nversion: 5964"},
"Event.OnPlanWinefieldRemoved":{"prefix":"Event.OnPlanWinefieldRemoved","body":["procedure OnPlanWinefieldRemoved(aPlayer: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs when player has removed a wine field plan.\nversion: 6301"},
"Event.OnPlayerDefeated":{"prefix":"Event.OnPlayerDefeated","body":["procedure OnPlayerDefeated(aPlayer: Integer) begin","\t$1","end;"],"description":"Occurs when certain player has been defeated. Defeat conditions are checked separately by Player AI.\nversion: 5057"},
"Event.OnPlayerVictory":{"prefix":"Event.OnPlayerVictory","body":["procedure OnPlayerVictory(aPlayer: Integer) begin","\t$1","end;"],"description":"Occurs when certain player is declared victorious. Victory conditions are checked separately by Player AI.\nversion: 5057"},
"Event.OnTick":{"prefix":"Event.OnTick","body":["procedure OnTick() begin","\t$1","end;"],"description":"Occurs every game logic update.\nversion: 5057"},
"Event.OnUnitAfterDied":{"prefix":"Event.OnUnitAfterDied","body":["procedure OnUnitAfterDied(aUnitType: TUnitType, aOwner: Integer, aX: Integer, aY: Integer) begin","\t$1","end;"],"description":"Occurs after a unit has died and has been completely removed from the game, meaning the tile it previously occupied can be used. If you need more information about the unit use the !OnUnitDied event. Note: Because units have a death animation there is a delay of several ticks between !OnUnitDied and !OnUnitAfterDied.\nversion: 6114"},
"Event.OnUnitAttacked":{"prefix":"Event.OnUnitAttacked","body":["procedure OnUnitAttacked(aUnit: Integer, aAttacker: Integer) begin","\t$1","end;"],"description":"Happens when a unit is attacked (shot at by archers or hit in melee). Attacker is always a warrior (could be archer or melee). This event will occur very frequently during battles.\nversion: 6587"},
"Event.OnUnitDied":{"prefix":"Event.OnUnitDied","body":["procedure OnUnitDied(aUnit: Integer, aKillerOwner: Integer) begin","\t$1","end;"],"description":"Occurs when a unit dies. If !KillerIndex is -1 the unit died from another cause such as hunger or Actions.!UnitKill. Called just before the unit is killed so UnitID is usable only during this event, and the tile occupied by the unit is still taken.\nversion: 5407"},
"Event.OnUnitTrained":{"prefix":"Event.OnUnitTrained","body":["procedure OnUnitTrained(aUnit: Integer) begin","\t$1","end;"],"description":"Occurs when player trains a unit.\nversion: 5057"},
"Event.OnUnitWounded":{"prefix":"Event.OnUnitWounded","body":["procedure OnUnitWounded(aUnit: Integer, aAttacker: Integer) begin","\t$1","end;"],"description":"Happens when unit is wounded. Attacker can be a warrior, recruit in tower or unknown (-1).\nversion: 5884"},
"Event.OnWarriorEquipped":{"prefix":"Event.OnWarriorEquipped","body":["procedure OnWarriorEquipped(aUnit: Integer, aGroup: Integer) begin","\t$1","end;"],"description":"Occurs when player equips a warrior.\nversion: 5057"},

"Actions.AIAutoAttackRange":{"prefix":"Actions.AIAutoAttackRange","body":["Actions.AIAutoAttackRange(${01:aPlayer:Byte}, ${11:aRange:Integer-Range (1 to 20)});"],"description":"Sets AI auto attack range. AI groups will automatically attack if you are closer than this many tiles.\nReturns: \nversion: 6251"},
"Actions.AIAutoBuild":{"prefix":"Actions.AIAutoBuild","body":["Actions.AIAutoBuild(${01:aPlayer:Byte}, ${11:aAuto:Boolean});"],"description":"Sets whether the AI should build and manage his own village\nReturns: \nversion: 5924"},
"Actions.AIAutoDefence":{"prefix":"Actions.AIAutoDefence","body":["Actions.AIAutoDefence(${01:aPlayer:Byte}, ${11:aAuto:Boolean});"],"description":"Sets whether the AI should position his soldiers automatically\nReturns: \nversion: 5924"},
"Actions.AIAutoRepair":{"prefix":"Actions.AIAutoRepair","body":["Actions.AIAutoRepair(${01:aPlayer:Byte}, ${11:aAuto:Boolean});"],"description":"Sets whether the AI should automatically repair damaged buildings\nReturns: \nversion: 5932"},
"Actions.AIDefencePositionAdd":{"prefix":"Actions.AIDefencePositionAdd","body":["Actions.AIDefencePositionAdd(${01:aPlayer:Byte}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aDir:Byte}, ${41:aGroupType:Byte}, ${51:aRadius:Integer}, ${61:aDefType:Byte});"],"description":"Adds a defence position for the specified AI player\nReturns: \nversion: 5932"},
"Actions.AIDefencePositionRemove":{"prefix":"Actions.AIDefencePositionRemove","body":["Actions.AIDefencePositionRemove(${01:aPlayer:Byte}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Removes defence position at X, Y\nReturns: \nversion: 6309"},
"Actions.AIDefencePositionRemoveAll":{"prefix":"Actions.AIDefencePositionRemoveAll","body":["Actions.AIDefencePositionRemoveAll(${01:aPlayer:Byte});"],"description":"Removes all defence positions for specified AI player\nReturns: \nversion: 6323"},
"Actions.AIDefendAllies":{"prefix":"Actions.AIDefendAllies","body":["Actions.AIDefendAllies(${01:aPlayer:Byte}, ${11:aDefend:Boolean});"],"description":"Sets whether AI should defend units and houses of allies as if they were its own\nReturns: \nversion: 6251"},
"Actions.AIEquipRate":{"prefix":"Actions.AIEquipRate","body":["Actions.AIEquipRate(${01:aPlayer:Byte}, ${11:aType:Byte-type}, ${21:aRate:Integer});"],"description":"Sets the warriors equip rate for AI.\nReturns: \nversion: 5778"},
"Actions.AIGroupsFormationSet":{"prefix":"Actions.AIGroupsFormationSet","body":["Actions.AIGroupsFormationSet(${01:aPlayer:Byte}, ${11:aType:Byte}, ${21:aCount:Integer}, ${31:aColumns:Integer});"],"description":"Sets the formation the AI uses for defence positions\nReturns: \nversion: 5778"},
"Actions.AIRecruitDelay":{"prefix":"Actions.AIRecruitDelay","body":["Actions.AIRecruitDelay(${01:aPlayer:Byte}, ${11:aDelay:Cardinal});"],"description":"Sets the number of ticks before the specified AI will start training recruits\nReturns: \nversion: 5924"},
"Actions.AIRecruitLimit":{"prefix":"Actions.AIRecruitLimit","body":["Actions.AIRecruitLimit(${01:aPlayer:Byte}, ${11:aLimit:Byte});"],"description":"Sets the number of recruits the AI will keep in each barracks\nReturns: \nversion: 5345"},
"Actions.AISerfsPerHouse":{"prefix":"Actions.AISerfsPerHouse","body":["Actions.AISerfsPerHouse(${01:aPlayer:Byte}, ${11:aSerfs:Single});"],"description":"Sets the number of serfs the AI will train per house. Can be a decimal (0.25 for 1 serf per 4 houses)\nReturns: \nversion: 5924"},
"Actions.AISoldiersLimit":{"prefix":"Actions.AISoldiersLimit","body":["Actions.AISoldiersLimit(${01:aPlayer:Byte}, ${11:aLimit:Integer});"],"description":"Sets the maximum number of soldiers the AI will train, or -1 for unlimited\nReturns: \nversion: 5932"},
"Actions.AIStartPosition":{"prefix":"Actions.AIStartPosition","body":["Actions.AIStartPosition(${01:aPlayer:Byte}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Sets the AI start position which is used for targeting AI attacks\nReturns: \nversion: 6251"},
"Actions.AIWorkerLimit":{"prefix":"Actions.AIWorkerLimit","body":["Actions.AIWorkerLimit(${01:aPlayer:Byte}, ${11:aLimit:Byte});"],"description":"Sets the maximum number of laborers the AI will train\nReturns: \nversion: 5924"},
"Actions.CinematicEnd":{"prefix":"Actions.CinematicEnd","body":["Actions.CinematicEnd(${01:aPlayer:Byte});"],"description":"Exits cinematic mode\nReturns: \nversion: 5938"},
"Actions.CinematicPanTo":{"prefix":"Actions.CinematicPanTo","body":["Actions.CinematicPanTo(${01:aPlayer:Byte}, ${11:X:Integer}, ${21:Y:Integer}, ${31:Duration:Integer});"],"description":"Pans the center of the player's screen to the given location over a set number of ticks. If Duration = 0 then the screen moves instantly.\nReturns: \nversion: 5938"},
"Actions.CinematicStart":{"prefix":"Actions.CinematicStart","body":["Actions.CinematicStart(${01:aPlayer:Byte});"],"description":"Puts the player in cinematic mode, blocking user input and allowing the screen to be panned\nReturns: \nversion: 5938"},
"Actions.FogCoverAll":{"prefix":"Actions.FogCoverAll","body":["Actions.FogCoverAll(${01:aPlayer:Byte});"],"description":"Covers (un-reveals) the entire map in fog of war for player\nReturns: \nversion: 5097"},
"Actions.FogCoverCircle":{"prefix":"Actions.FogCoverCircle","body":["Actions.FogCoverCircle(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aRadius:Integer});"],"description":"Reveals a circle in fog of war for player\nReturns: \nversion: 5097"},
"Actions.FogCoverRect":{"prefix":"Actions.FogCoverRect","body":["Actions.FogCoverRect(${01:aPlayer:Integer}, ${11:X1:Integer-Left coordinate}, ${21:Y1:Integer-Top coordinate}, ${31:X2:Integer-Right coordinate}, ${41:Y2:Integer-Bottom coordinate});"],"description":"Covers a rectangular area in fog of war for player\nReturns: \nversion: 5777"},
"Actions.FogRevealAll":{"prefix":"Actions.FogRevealAll","body":["Actions.FogRevealAll(${01:aPlayer:Byte});"],"description":"Reveals the entire map in fog of war for player\nReturns: \nversion: 5097"},
"Actions.FogRevealCircle":{"prefix":"Actions.FogRevealCircle","body":["Actions.FogRevealCircle(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aRadius:Integer});"],"description":"Reveals a circle in fog of war for player\nReturns: \nversion: 5097"},
"Actions.FogRevealRect":{"prefix":"Actions.FogRevealRect","body":["Actions.FogRevealRect(${01:aPlayer:Integer}, ${11:X1:Integer-Left coordinate}, ${21:Y1:Integer-Top coordinate}, ${31:X2:Integer-Right coordinate}, ${41:Y2:Integer-Bottom coordinate});"],"description":"Reveals a rectangular area in fog of war for player\nReturns: \nversion: 5777"},
"Actions.GiveAnimal":{"prefix":"Actions.GiveAnimal","body":["Actions.GiveAnimal(${01:aType:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Adds an animal to the game and returns the unit ID or -1 if the animal was not able to be added\nReturns: Integer\nversion: 5057"},
"Actions.GiveField":{"prefix":"Actions.GiveField","body":["Actions.GiveField(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Adds finished field and returns true if field was successfully added\nReturns: Boolean\nversion: 6311"},
"Actions.GiveGroup":{"prefix":"Actions.GiveGroup","body":["Actions.GiveGroup(${01:aPlayer:Integer}, ${11:aType:Integer}, ${21:X,Y:Integer}, ${31:aDir:Integer}, ${41:aCount:Integer}, ${51:aColumns:Integer-Units per row});"],"description":"Give player group of warriors and return the group ID or -1 if the group was not able to be added\nReturns: Integer\nversion: 5057"},
"Actions.GiveHouse":{"prefix":"Actions.GiveHouse","body":["Actions.GiveHouse(${01:aPlayer:Integer}, ${11:aHouseType:Integer}, ${21:X,Y:Integer});"],"description":"Give player a built house and returns the house ID or -1 if the house was not able to be added\nReturns: Integer\nversion: 5097"},
"Actions.GiveHouseSite":{"prefix":"Actions.GiveHouseSite","body":["Actions.GiveHouseSite(${01:aPlayer:Integer}, ${11:aHouseType:Integer}, ${21:X:Integer}, ${31:Y:Integer}, ${41:aAddMaterials:Boolean});"],"description":"Give player a digged house area and returns House ID or -1 if house site was not able to be added. If !AddMaterials = True, wood and stone will be added\nReturns: Integer\nversion: 6288"},
"Actions.GiveRoad":{"prefix":"Actions.GiveRoad","body":["Actions.GiveRoad(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Adds finished road and returns true if road was successfully added\nReturns: Boolean\nversion: 6311"},
"Actions.GiveUnit":{"prefix":"Actions.GiveUnit","body":["Actions.GiveUnit(${01:aPlayer:Integer}, ${11:aType:Integer}, ${21:X:Integer}, ${31:Y:Integer}, ${41:aDir:Integer});"],"description":"Give player a single citizen and returns the unit ID or -1 if the unit was not able to be added\nReturns: Integer\nversion: 5057"},
"Actions.GiveWares":{"prefix":"Actions.GiveWares","body":["Actions.GiveWares(${01:aPlayer:Integer}, ${11:aType:Integer}, ${21:aCount:Integer});"],"description":"Adds amount of wares to players 1st Store\nReturns: \nversion: 5057"},
"Actions.GiveWeapons":{"prefix":"Actions.GiveWeapons","body":["Actions.GiveWeapons(${01:aPlayer:Integer}, ${11:aType:Integer}, ${21:aCount:Integer});"],"description":"Adds amount of weapons to players 1st Barracks\nReturns: \nversion: 5165"},
"Actions.GroupBlockOrders":{"prefix":"Actions.GroupBlockOrders","body":["Actions.GroupBlockOrders(${01:aGroupID:Integer}, ${11:aBlock:Boolean});"],"description":"Disables (Disable = True) or enables (Disable = False) control over specifed warriors group\nReturns: \nversion: 6277"},
"Actions.GroupDisableHungryMessage":{"prefix":"Actions.GroupDisableHungryMessage","body":["Actions.GroupDisableHungryMessage(${01:aGroupID:Integer}, ${11:aDisable:Boolean});"],"description":"Sets whether the specified group will alert the player when they become hungry (true to disable hunger messages, false to enable them)\nReturns: \nversion: 5993"},
"Actions.GroupHungerSet":{"prefix":"Actions.GroupHungerSet","body":["Actions.GroupHungerSet(${01:aGroupID:Integer}, ${11:aHungerLevel:Integer-Hunger level (ticks until death)});"],"description":"Set hunger level for all group members\nReturns: \nversion: 5993"},
"Actions.GroupKillAll":{"prefix":"Actions.GroupKillAll","body":["Actions.GroupKillAll(${01:aGroupID:Integer}, ${11:aSilent:Boolean});"],"description":"Kills all members of the specified group\nReturns: \nversion: 5993"},
"Actions.GroupOrderAttackHouse":{"prefix":"Actions.GroupOrderAttackHouse","body":["Actions.GroupOrderAttackHouse(${01:aGroupID:Integer}, ${11:aHouseID:Integer});"],"description":"Order the specified group to attack the specified house\nReturns: \nversion: 5057"},
"Actions.GroupOrderAttackUnit":{"prefix":"Actions.GroupOrderAttackUnit","body":["Actions.GroupOrderAttackUnit(${01:aGroupID:Integer}, ${11:aUnitID:Integer});"],"description":"Order the specified group to attack the specified unit\nReturns: \nversion: 5057"},
"Actions.GroupOrderFood":{"prefix":"Actions.GroupOrderFood","body":["Actions.GroupOrderFood(${01:aGroupID:Integer});"],"description":"Order the specified group to request food\nReturns: \nversion: 5057"},
"Actions.GroupOrderHalt":{"prefix":"Actions.GroupOrderHalt","body":["Actions.GroupOrderHalt(${01:aGroupID:Integer});"],"description":"Order the specified group to halt\nReturns: \nversion: 5057"},
"Actions.GroupOrderLink":{"prefix":"Actions.GroupOrderLink","body":["Actions.GroupOrderLink(${01:aGroupID:Integer}, ${11:aDestGroupID:Integer});"],"description":"Order the first specified group to link to the second specified group\nReturns: \nversion: 5057"},
"Actions.GroupOrderSplit":{"prefix":"Actions.GroupOrderSplit","body":["Actions.GroupOrderSplit(${01:aGroupID:Integer});"],"description":"Order the specified group to split in half. Return the newly create group ID or -1 if splitting failed (e.g. only 1 member)\nReturns: Integer\nversion: 5057"},
"Actions.GroupOrderSplitUnit":{"prefix":"Actions.GroupOrderSplitUnit","body":["Actions.GroupOrderSplitUnit(${01:aGroupID:Integer}, ${11:aUnitID:Integer});"],"description":"Splits specified unit from the group. Returns the newly create group ID or -1 if splitting failed (e.g. only 1 member)\nReturns: Integer\nversion: 6338"},
"Actions.GroupOrderStorm":{"prefix":"Actions.GroupOrderStorm","body":["Actions.GroupOrderStorm(${01:aGroupID:Integer});"],"description":"Order the specified group to storm attack\nReturns: \nversion: 5057"},
"Actions.GroupOrderWalk":{"prefix":"Actions.GroupOrderWalk","body":["Actions.GroupOrderWalk(${01:aGroupID:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aDirection:Integer});"],"description":"Order the specified group to walk somewhere\nReturns: \nversion: 5057"},
"Actions.GroupSetFormation":{"prefix":"Actions.GroupSetFormation","body":["Actions.GroupSetFormation(${01:aGroupID:Integer}, ${11:aNumColumns:Byte});"],"description":"Sets the number of columns (units per row) for the specified group\nReturns: \nversion: 5057"},
"Actions.HouseAddBuildingMaterials":{"prefix":"Actions.HouseAddBuildingMaterials","body":["Actions.HouseAddBuildingMaterials(${01:aHouseID:Integer});"],"description":"Add building materials to the specified WIP house area\nReturns: \nversion: 6510"},
"Actions.HouseAddBuildingProgress":{"prefix":"Actions.HouseAddBuildingProgress","body":["Actions.HouseAddBuildingProgress(${01:aHouseID:Integer});"],"description":"Add 5 points of building progress to the specified WIP house area\nReturns: \nversion: 6297"},
"Actions.HouseAddDamage":{"prefix":"Actions.HouseAddDamage","body":["Actions.HouseAddDamage(${01:aHouseID:Integer}, ${11:aDamage:Integer});"],"description":"Add damage to the specified house\nReturns: \nversion: 5057"},
"Actions.HouseAddRepair":{"prefix":"Actions.HouseAddRepair","body":["Actions.HouseAddRepair(${01:aHouseID:Integer}, ${11:aRepair:Integer});"],"description":"Reduces damage to the specified house\nReturns: \nversion: 5441"},
"Actions.HouseAddWaresTo":{"prefix":"Actions.HouseAddWaresTo","body":["Actions.HouseAddWaresTo(${01:aHouseID:Integer}, ${11:aType:Integer}, ${21:aCount:Integer});"],"description":"Add wares to the specified house\nReturns: \nversion: 5057"},
"Actions.HouseAllow":{"prefix":"Actions.HouseAllow","body":["Actions.HouseAllow(${01:aPlayer:Integer}, ${11:aHouseType:Integer}, ${21:aAllowed:Boolean});"],"description":"Sets whether the player is allowed to build the specified house. Note: The house must still be unlocked normally (e.g. sawmill for farm), use !HouseUnlock to override that.\nReturns: \nversion: 5057"},
"Actions.HouseBarracksEquip":{"prefix":"Actions.HouseBarracksEquip","body":["Actions.HouseBarracksEquip(${01:aHouseID:Integer}, ${11:aUnitType:Integer}, ${21:aCount:Integer});"],"description":"Equips the specified unit from the specified barracks. Returns the number of units successfully equipped.\nReturns: Integer\nversion: 5174"},
"Actions.HouseBarracksGiveRecruit":{"prefix":"Actions.HouseBarracksGiveRecruit","body":["Actions.HouseBarracksGiveRecruit(${01:aHouseID:Integer});"],"description":"Adds a recruit inside the specified barracks\nReturns: \nversion: 6125"},
"Actions.HouseDeliveryBlock":{"prefix":"Actions.HouseDeliveryBlock","body":["Actions.HouseDeliveryBlock(${01:aHouseID:Integer}, ${11:aDeliveryBlocked:Boolean});"],"description":"Sets delivery blocking for the specified house\nReturns: \nversion: 5057"},
"Actions.HouseDestroy":{"prefix":"Actions.HouseDestroy","body":["Actions.HouseDestroy(${01:aHouseID:Integer}, ${11:aSilent:Boolean});"],"description":"Destroys the specified house. Silent means the house will not leave rubble or play destroy sound\nReturns: \nversion: 5263"},
"Actions.HouseDisableUnoccupiedMessage":{"prefix":"Actions.HouseDisableUnoccupiedMessage","body":["Actions.HouseDisableUnoccupiedMessage(${01:aHouseID:Integer}, ${11:aDisabled:Boolean});"],"description":"Sets whether the specified house displays unoccupied messages to the player\nReturns: \nversion: 5345"},
"Actions.HouseOwnerSet":{"prefix":"Actions.HouseOwnerSet","body":["Actions.HouseOwnerSet();"],"description":"Take house from one player and give it to another\nReturns: \nversion: -"},
"Actions.HouseRepairEnable":{"prefix":"Actions.HouseRepairEnable","body":["Actions.HouseRepairEnable(${01:aHouseID:Integer}, ${11:aRepairEnabled:Boolean});"],"description":"Enables house repair for the specified house\nReturns: \nversion: 5057"},
"Actions.HouseSchoolQueueAdd":{"prefix":"Actions.HouseSchoolQueueAdd","body":["Actions.HouseSchoolQueueAdd(${01:aHouseID:Integer}, ${11:aUnitType:Integer}, ${21:aCount:Integer});"],"description":"Adds the specified unit to the specified school's queue. Returns the number of units successfully added to the queue.\nReturns: Integer\nversion: 5174"},
"Actions.HouseSchoolQueueRemove":{"prefix":"Actions.HouseSchoolQueueRemove","body":["Actions.HouseSchoolQueueRemove(${01:aHouseID:Integer}, ${11:QueueIndex:Integer});"],"description":"Removes the unit from the specified slot of the school queue. Slot 0 is the unit currently training, slots 1..5 are the queue.\nReturns: \nversion: 5174"},
"Actions.HouseTakeWaresFrom":{"prefix":"Actions.HouseTakeWaresFrom","body":["Actions.HouseTakeWaresFrom(${01:aHouseID:Integer}, ${11:aType:Integer}, ${21:aCount:Integer});"],"description":"Remove wares from the specified house. If a serf was on the way to pick up the ware, the serf will abandon his task\nReturns: \nversion: 6015"},
"Actions.HouseUnlock":{"prefix":"Actions.HouseUnlock","body":["Actions.HouseUnlock(${01:aPlayer:Integer}, ${11:aHouseType:Integer});"],"description":"Allows player to build the specified house even if they don't have the house built that normally unlocks it (e.g. sawmill for farm). Note: Does not override blocked houses, use !HouseAllow for that.\nReturns: \nversion: 5057"},
"Actions.HouseWareBlock":{"prefix":"Actions.HouseWareBlock","body":["Actions.HouseWareBlock(${01:aHouseID:Integer}, ${11:aWareType:Integer}, ${21:aBlocked:Boolean});"],"description":"Blocks a specific ware in a storehouse or barracks\nReturns: \nversion: 5099"},
"Actions.HouseWeaponsOrderSet":{"prefix":"Actions.HouseWeaponsOrderSet","body":["Actions.HouseWeaponsOrderSet(${01:aHouseID:Integer}, ${11:aWareType:Integer}, ${21:aAmount:Integer});"],"description":"Sets the amount of the specified weapon ordered to be produced in the specified house\nReturns: \nversion: 5165"},
"Actions.HouseWoodcutterChopOnly":{"prefix":"Actions.HouseWoodcutterChopOnly","body":["Actions.HouseWoodcutterChopOnly(${01:aHouseID:Integer}, ${11:aChopOnly:Boolean});"],"description":"Sets whether a woodcutter's hut is on chop-only mode\nReturns: \nversion: 5099"},
"Actions.Log":{"prefix":"Actions.Log","body":["Actions.Log(${01:aText:AnsiString});"],"description":"Writes a line of text to the game log file. Useful for debugging. Note that many calls to this procedure will have a noticeable performance impact, as well as creating a large log file, so it is recommended you don't use it outside of debugging\nReturns: \nversion: 6067"},
"Actions.MapTileHeightSet":{"prefix":"Actions.MapTileHeightSet","body":["Actions.MapTileHeightSet(${01:X:Integer}, ${11:Y:Integer}, ${21:Height:Integer-Height (0..100)});"],"description":"Sets the height of the terrain at the top left corner (vertex) of the tile at the specified XY coordinates. Returns true if the change succeeded or false if it failed. The change will fail if it would cause a unit to become stuck or a house to be damaged\nReturns: Boolean\nversion: 6587"},
"Actions.MapTileObjectSet":{"prefix":"Actions.MapTileObjectSet","body":["Actions.MapTileObjectSet(${01:X:Integer}, ${11:Y:Integer}, ${21:Obj:Integer-Object type (0..255)});"],"description":"Sets the terrain object on the tile at the specified XY coordinates. Object IDs can be seen in the map editor on the objects tab. Object 61 is \"block walking\". To set no object, use object type 255. Returns true if the change succeeded or false if it failed. The change will fail if it would cause a unit to become stuck or a house/field to be damaged\nReturns: Boolean\nversion: 6587"},
"Actions.MapTileSet":{"prefix":"Actions.MapTileSet","body":["Actions.MapTileSet(${01:X:Integer}, ${11:Y:Integer}, ${21:aType:Integer-Tile type (0..255)}, ${31:aRotation:Integer-Tile rotation (0..3)});"],"description":"Sets the tile type and rotation at the specified XY coordinates. Tile IDs can be seen by hovering over the tiles on the terrain tiles tab in the map editor. Returns true if the change succeeded or false if it failed. The change will fail if it would cause a unit to become stuck or a house/field to be damaged\nReturns: Boolean\nversion: 6587"},
"Actions.MarketSetTrade":{"prefix":"Actions.MarketSetTrade","body":["Actions.MarketSetTrade(${01:aMarketID:Integer}, ${11:aFrom:Integer}, ${21:aTo:Integer}, ${31:aAmount:Integer});"],"description":"Sets the trade in the specified market\nReturns: \nversion: 6216"},
"Actions.OverlayTextAppend":{"prefix":"Actions.OverlayTextAppend","body":["Actions.OverlayTextAppend(${01:aPlayer:Shortint}, ${11:aText:AnsiString});"],"description":"Appends to text overlaid on top left of screen. If the player index is -1 it will be appended for all players.\nReturns: \nversion: 5333"},
"Actions.OverlayTextAppendFormatted":{"prefix":"Actions.OverlayTextAppendFormatted","body":["Actions.OverlayTextAppendFormatted(${01:aPlayer:Shortint}, ${11:aText:AnsiString}, ${21:Params:array of const-Array of arguments});"],"description":"Appends to text overlaid on top left of screen with formatted arguments (same as Format function). If the player index is -1 it will be appended for all players.\nReturns: \nversion: 5333"},
"Actions.OverlayTextSet":{"prefix":"Actions.OverlayTextSet","body":["Actions.OverlayTextSet(${01:aPlayer:Shortint}, ${11:aText:AnsiString});"],"description":"Sets text overlaid on top left of screen. If the player index is -1 it will be set for all players.\nReturns: \nversion: 5333"},
"Actions.OverlayTextSetFormatted":{"prefix":"Actions.OverlayTextSetFormatted","body":["Actions.OverlayTextSetFormatted(${01:aPlayer:Shortint}, ${11:aText:AnsiString}, ${21:Params:array of const-Array of arguments});"],"description":"Sets text overlaid on top left of screen with formatted arguments (same as Format function). If the player index is -1 it will be set for all players.\nReturns: \nversion: 5333"},
"Actions.PlanAddField":{"prefix":"Actions.PlanAddField","body":["Actions.PlanAddField(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Adds a corn field plan. Returns true if the plan was successfully added or false if it failed (e.g. tile blocked)\nReturns: Boolean\nversion: 5057"},
"Actions.PlanAddHouse":{"prefix":"Actions.PlanAddHouse","body":["Actions.PlanAddHouse(${01:aPlayer:Integer}, ${11:aHouseType:Integer}, ${21:X:Integer}, ${31:Y:Integer});"],"description":"Adds a road plan. Returns true if the plan was successfully added or false if it failed (e.g. tile blocked)\nReturns: Boolean\nversion: 5057"},
"Actions.PlanAddRoad":{"prefix":"Actions.PlanAddRoad","body":["Actions.PlanAddRoad(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Adds a road plan. Returns true if the plan was successfully added or false if it failed (e.g. tile blocked)\nReturns: Boolean\nversion: 5057"},
"Actions.PlanAddWinefield":{"prefix":"Actions.PlanAddWinefield","body":["Actions.PlanAddWinefield(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Adds a wine field plan. Returns true if the plan was successfully added or false if it failed (e.g. tile blocked)\nReturns: Boolean\nversion: 5057"},
"Actions.PlanConnectRoad":{"prefix":"Actions.PlanConnectRoad","body":["Actions.PlanConnectRoad(${01:aPlayer:Integer}, ${11:X1:Integer-Left coordinate}, ${21:Y1:Integer-Top coordinate}, ${31:X2:Integer-Right coordinate}, ${41:Y2:Integer-Bottom coordinate}, ${51:aCompleted:Boolean-Completed road});"],"description":"Connects road plans between two points like AI builder and returns True if road plan was successfully added. If CompletedRoad = True, road will be added instead of plans\nReturns: Boolean\nversion: 6303"},
"Actions.PlanRemove":{"prefix":"Actions.PlanRemove","body":["Actions.PlanRemove(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Removes house, road or field plans from the specified tile for the specified player Returns true if the plan was successfully removed or false if it failed (e.g. tile blocked)\nReturns: Boolean\nversion: 5345"},
"Actions.PlayerAddDefaultGoals":{"prefix":"Actions.PlayerAddDefaultGoals","body":["Actions.PlayerAddDefaultGoals(${01:aPlayer:Byte}, ${11:aBuildings:Boolean});"],"description":"Add default goals/lost goals for the specified player. If the parameter buildings is true the goals will be important buildings. Otherwise it will be troops.\nReturns: \nversion: 5165"},
"Actions.PlayerAllianceChange":{"prefix":"Actions.PlayerAllianceChange","body":["Actions.PlayerAllianceChange(${01:aPlayer1:Byte}, ${11:aPlayer2:Byte}, ${21:aCompliment:Boolean-Both ways}, ${31:aAllied:Boolean});"],"description":"Change whether player1 is allied to player2. If Compliment is true, then it is set both ways (so also whether player2 is allied to player1)\nReturns: \nversion: 5097"},
"Actions.PlayerDefeat":{"prefix":"Actions.PlayerDefeat","body":["Actions.PlayerDefeat(${01:aPlayer:Integer});"],"description":"Proclaims player defeated\nReturns: \nversion: 5057"},
"Actions.PlayerShareFog":{"prefix":"Actions.PlayerShareFog","body":["Actions.PlayerShareFog(${01:aPlayer1:Integer}, ${11:aPlayer2:Integer}, ${21:aShare:Boolean});"],"description":"Sets whether player A shares his vision with player B. Sharing can still only happen between allied players, but this command lets you disable allies from sharing.\nReturns: \nversion: 5345"},
"Actions.PlayerWareDistribution":{"prefix":"Actions.PlayerWareDistribution","body":["Actions.PlayerWareDistribution(${01:aPlayer:Byte}, ${11:aWareType:Byte}, ${21:aHouseType:Byte}, ${31:aAmount:Byte-Distribution amount (0..5)});"],"description":"Sets ware distribution for the specified resource, house and player.\nReturns: \nversion: 5345"},
"Actions.PlayerWin":{"prefix":"Actions.PlayerWin","body":["Actions.PlayerWin(${01:aVictors:array of Integer-Array of player IDs}, ${11:aTeamVictory:Boolean});"],"description":"Set specified player(s) victorious, and all team members of those player(s) if the 2nd parameter !TeamVictory is set to true. All players who were not set to victorious are set to defeated.\nReturns: \nversion: 5057"},
"Actions.PlayWAV":{"prefix":"Actions.PlayWAV","body":["Actions.PlayWAV(${01:aPlayer:Shortint}, ${11:aFileName:AnsiString}, ${21:aVolume:Single-Audio level (0.0 to 1.0)});"],"description":"Plays audio file. If the player index is -1 the sound will be played to all players. Mono and stereo WAV files are supported. WAV file goes in mission folder named: Mission Name.filename.wav\nReturns: \nversion: 5309"},
"Actions.PlayWAVAtLocation":{"prefix":"Actions.PlayWAVAtLocation","body":["Actions.PlayWAVAtLocation(${01:aPlayer:Shortint}, ${11:aFileName:AnsiString}, ${21:aVolume:Single-Audio level (0.0 to 1.0)}, ${31:aRadius:Single-Radius (minimum 28)}, ${41:aX:Integer}, ${51:aY:Integer});"],"description":"Plays audio file at a location on the map. If the player index is -1 the sound will be played to all players. Radius specifies approximately the distance at which the sound can no longer be heard (normal game sounds use radius 32). Only mono WAV files are supported. WAV file goes in mission folder named: Mission Name.filename.wav. Will not play if the location is not revealed to the player. Higher volume range is allowed than PlayWAV as positional sounds are quieter\nReturns: \nversion: 5309"},
"Actions.PlayWAVAtLocationLooped":{"prefix":"Actions.PlayWAVAtLocationLooped","body":["Actions.PlayWAVAtLocationLooped(${01:aPlayer:Shortint}, ${11:aFileName:AnsiString}, ${21:aVolume:Single-Audio level (0.0 to 1.0)}, ${31:aRadius:Single-aRadius (minimum 28)}, ${41:aX:Integer}, ${51:aY:Integer});"],"description":"Plays looped audio file at a location on the map. If the player index is -1 the sound will be played to all players. aRadius specifies approximately the distance at which the sound can no longer be heard (normal game sounds use aRadius 32). Only mono WAV files are supported. WAV file goes in mission folder named: Mission Name.filename.wav. Will not play if the location is not revealed to the player (will start playing automatically when it is revealed). Higher aVolume range is allowed than PlayWAV as positional sounds are quieter. The sound will continue to loop if the game is paused and will restart automatically when the game is loaded.\nReturns: Integer // LoopIndex of the sound\nversion: 6222"},
"Actions.PlayWAVFadeMusic":{"prefix":"Actions.PlayWAVFadeMusic","body":["Actions.PlayWAVFadeMusic(${01:aPlayer:Shortint}, ${11:aFileName:AnsiString}, ${21:aVolume:Single-Audio level (0.0 to 1.0)});"],"description":"Same as PlayWAV except music will fade then mute while the WAV is playing, then fade back in afterwards. You should leave a small gap at the start of your WAV file to give the music time to fade\nReturns: \nversion: 6220"},
"Actions.PlayWAVLooped":{"prefix":"Actions.PlayWAVLooped","body":["Actions.PlayWAVLooped(${01:aPlayer:Shortint}, ${11:aFileName:AnsiString}, ${21:aVolume:Single-Audio level (0.0 to 1.0)});"],"description":"Plays looped audio file. If the player index is -1 the sound will be played to all players. Mono or stereo WAV files are supported. WAV file goes in mission folder named: Mission Name.filename.wav. The sound will continue to loop if the game is paused and will restart automatically when the game is loaded.\nReturns: Integer // LoopIndex of the sound\nversion: 6222"},
"Actions.RemoveRoad":{"prefix":"Actions.RemoveRoad","body":["Actions.RemoveRoad(${01:X:Integer}, ${11:Y:Integer});"],"description":"Removes road\nReturns: \nversion: 5927"},
"Actions.SetTradeAllowed":{"prefix":"Actions.SetTradeAllowed","body":["Actions.SetTradeAllowed(${01:aPlayer:Integer}, ${11:aResType:Integer}, ${21:aAllowed:Boolean});"],"description":"Sets whether the player is allowed to trade the specified resource.\nReturns: \nversion: 5057"},
"Actions.ShowMsg":{"prefix":"Actions.ShowMsg","body":["Actions.ShowMsg(${01:aPlayer:Shortint}, ${11:aText:AnsiString});"],"description":"Displays a message to a player. If the player index is -1 the message will be shown to all players.\nReturns: \nversion: 5057"},
"Actions.ShowMsgFormatted":{"prefix":"Actions.ShowMsgFormatted","body":["Actions.ShowMsgFormatted(${01:aPlayer:Shortint}, ${11:aText:AnsiString}, ${21:Params:array of const-Array of arguments});"],"description":"Displays a message to a player with formatted arguments (same as Format function). If the player index is -1 the message will be shown to all players.\nReturns: \nversion: 5333"},
"Actions.ShowMsgGoto":{"prefix":"Actions.ShowMsgGoto","body":["Actions.ShowMsgGoto(${01:aPlayer:Shortint}, ${11:aX:Integer}, ${21:aY:Integer}, ${31:aText:AnsiString});"],"description":"Displays a message to a player with a goto button that takes the player to the specified location. If the player index is -1 the message will be shown to all players.\nReturns: \nversion: 5345"},
"Actions.ShowMsgGotoFormatted":{"prefix":"Actions.ShowMsgGotoFormatted","body":["Actions.ShowMsgGotoFormatted(${01:aPlayer:Shortint}, ${11:aX:Integer}, ${21:aY:Integer}, ${31:aText:AnsiString}, ${41:Params:array of const-Array of arguments});"],"description":"Displays a message to a player with formatted arguments (same as Format function) and a goto button that takes the player to the specified location. If the player index is -1 the message will be shown to all players.\nReturns: \nversion: 5345"},
"Actions.StopLoopedWAV":{"prefix":"Actions.StopLoopedWAV","body":["Actions.StopLoopedWAV(${01:aLoopIndex:Integer-LoopIndex is the value that was returned by either of those functions when the looped sound was started.});"],"description":"Stops playing a looped sound that was previously started with either Actions.PlayWAVLooped or Actions.PlayWAVAtLocationLooped.\nReturns: \nversion: 6222"},
"Actions.UnitBlock":{"prefix":"Actions.UnitBlock","body":["Actions.UnitBlock(${01:aPlayer:Byte}, ${11:aType:Integer}, ${21:aBlock:Boolean});"],"description":"Sets whether the specified player can train/equip the specified unit type\nReturns: \nversion: 5993"},
"Actions.UnitDirectionSet":{"prefix":"Actions.UnitDirectionSet","body":["Actions.UnitDirectionSet(${01:aUnitID:Integer}, ${11:aDirection:Integer});"],"description":"Makes the specified unit face a certain direction. Note: Only works on idle units so as not to interfere with game logic and cause crashes. Returns true on success or false on failure.\nReturns: Boolean\nversion: 5057"},
"Actions.UnitHungerSet":{"prefix":"Actions.UnitHungerSet","body":["Actions.UnitHungerSet(${01:aUnitID:Integer}, ${11:aHungerLevel:Integer-Hunger level (ticks until death)});"],"description":"Sets the hunger level of the specified unit in ticks until death\nReturns: \nversion: 5057"},
"Actions.UnitKill":{"prefix":"Actions.UnitKill","body":["Actions.UnitKill(${01:aUnitID:Integer}, ${11:aSilent:Boolean});"],"description":"Kills the specified unit. Silent means the death animation (ghost) and sound won't play\nReturns: \nversion: 5099"},
"Actions.UnitOrderWalk":{"prefix":"Actions.UnitOrderWalk","body":["Actions.UnitOrderWalk(${01:aUnitID:Integer}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Order the specified unit to walk somewhere. Note: Only works on idle units so as not to interfere with game logic and cause crashes. Returns true on success or false on failure.\nReturns: Boolean\nversion: 5057"},
"Actions.UnitLock":{"prefix":"Actions.UnitLock","body":["Actions.UnitLock();"],"description":"Lock out the unit from game updates and make it manually scriptable (?)\nReturns: \nversion: -"},
"Actions.UnitOwnerSet":{"prefix":"Actions.UnitOwnerSet","body":["Actions.UnitOwnerSet();"],"description":"Take unit from one player and give it to another\nReturns: \nversion: -"},
"Actions.UnitPositionSet":{"prefix":"Actions.UnitPositionSet","body":["Actions.UnitPositionSet();"],"description":"Magically move unit from one place to another (?)\nReturns: \nversion: -"},

"States.ClosestGroup":{"prefix":"States.ClosestGroup","body":["States.ClosestGroup(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aGroupType:Integer});"],"description":"Returns the group of the specified player and group type that is closest to the specified coordinates, r -1 if no such group was found. If the group type is -1 any group type will be accepted\nReturns: Integer // Group ID\nversion: 6216"},
"States.ClosestGroupMultipleTypes":{"prefix":"States.ClosestGroupMultipleTypes","body":["States.ClosestGroupMultipleTypes(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aGroupTypes:set of Byte-Set of group types});"],"description":"Returns the group of the specified player and group types that is closest to the specified coordinates, or -1 if no such group was found. The group types is a \"set of Byte\", for example [1,3]\nReturns: Integer // Group ID\nversion: 6216"},
"States.ClosestHouse":{"prefix":"States.ClosestHouse","body":["States.ClosestHouse(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aHouseType:Integer});"],"description":"Returns the house of the specified player and house type that is closest to the specified coordinates, or -1 if no such house was found. If the house type is -1 any house type will be accepted\nReturns: Integer // House ID\nversion: 6216"},
"States.ClosestHouseMultipleTypes":{"prefix":"States.ClosestHouseMultipleTypes","body":["States.ClosestHouseMultipleTypes(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aHouseTypes:set of Byte-Set of house types});"],"description":"Returns the house of the specified player and house types that is closest to the specified coordinates, or -1 if no such house was found. The house types is a \"set of Byte\", for example [11,13,21]\nReturns: Integer // House ID\nversion: 6216"},
"States.ClosestUnit":{"prefix":"States.ClosestUnit","body":["States.ClosestUnit(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aUnitType:Integer});"],"description":"Returns the unit of the specified player and unit type that is closest to the specified coordinates, or -1 if no such unit was found. If the unit type is -1 any unit type will be accepted\nReturns: Integer // Unit ID\nversion: 6216"},
"States.ClosestUnitMultipleTypes":{"prefix":"States.ClosestUnitMultipleTypes","body":["States.ClosestUnitMultipleTypes(${01:aPlayer:Integer}, ${11:X:Integer}, ${21:Y:Integer}, ${31:aUnitTypes:set of Byte-Set of unit types});"],"description":"Returns the unit of the specified player and unit types that is closest to the specified coordinates, or -1 if no such unit was found. The unit types is a \"set of Byte\", for example [0,9]\nReturns: Integer // Unit ID\nversion: 6216"},
"States.ConnectedByRoad":{"prefix":"States.ConnectedByRoad","body":["States.ConnectedByRoad(${01:X1:Integer-left coordinate}, ${11:Y1:Integer-top coordinate}, ${21:X2:Integer-right coordinate}, ${31:Y2:Integer-bottom coordinate});"],"description":"Check if two tiles are connected by walkable road\nReturns: Boolean // Connected\nversion: 6602"},
"States.ConnectedByWalking":{"prefix":"States.ConnectedByWalking","body":["States.ConnectedByWalking(${01:X1:Integer-Left coordinate}, ${11:Y1:Integer-Top coordinate}, ${21:X2:Integer-Right coordinate}, ${31:Y2:Integer-Bottom coordinate});"],"description":"Check if two tiles are connected by a walkable route\nReturns: Boolean // Connected\nversion: 6602"},
"States.FogRevealed":{"prefix":"States.FogRevealed","body":["States.FogRevealed(${01:aPlayer:Byte}, ${11:aX:Integer}, ${21:aY:Integer});"],"description":"Check if a tile is revealed in fog of war for a player\nReturns: Boolean // Revealed\nversion: 5097"},
"States.GameTime":{"prefix":"States.GameTime","body":["States.GameTime();"],"description":"Get the number of game ticks since mission start\nReturns: Cardinal // Ticks (~10 per second)\nversion: 5057"},
"States.GroupAt":{"prefix":"States.GroupAt","body":["States.GroupAt(${01:aX:Integer}, ${11:aY:Integer});"],"description":"Returns the ID of the group of the unit on the specified tile or -1 if no group exists there\nReturns: Integer // Group ID\nversion: 5057"},
"States.GroupColumnCount":{"prefix":"States.GroupColumnCount","body":["States.GroupColumnCount(${01:aGroupID:Integer});"],"description":"Returns the number of columns (units per row) of the specified group\nReturns: Integer // Column count\nversion: 5272"},
"States.GroupDead":{"prefix":"States.GroupDead","body":["States.GroupDead(${01:aGroupID:Integer});"],"description":"Returns true if the group is dead (all members dead or joined other groups)\nReturns: Boolean // Dead\nversion: 5057"},
"States.GroupIdle":{"prefix":"States.GroupIdle","body":["States.GroupIdle(${01:aGroupID:Integer});"],"description":"Returns true if specified group is idle (has no orders/action)\nReturns: Boolean // Idle\nversion: 6523"},
"States.GroupMember":{"prefix":"States.GroupMember","body":["States.GroupMember(${01:aGroupID:Integer}, ${11:aMemberIndex:Integer});"],"description":"Returns the unit ID of the specified group member. Member 0 will be the flag holder, 1...!GroupMemberCount-1 will be the other members (0 <= !MemberIndex <= !GroupMemberCount-1)\nReturns: Integer // Unit ID\nversion: 5057"},
"States.GroupMemberCount":{"prefix":"States.GroupMemberCount","body":["States.GroupMemberCount(${01:aGroupID:Integer});"],"description":"Returns the total number of members of the specified group\nReturns: Integer // Member count\nversion: 5057"},
"States.GroupOwner":{"prefix":"States.GroupOwner","body":["States.GroupOwner(${01:aGroupID:Integer});"],"description":"Returns the owner of the specified group or -1 if Group ID invalid\nReturns: Integer // Player ID\nversion: 5057"},
"States.GroupType":{"prefix":"States.GroupType","body":["States.GroupType(${01:aGroupID:Integer});"],"description":"Returns the type of the specified group or -1 if Group ID invalid\nReturns: Integer // Group type\nversion: 5932"},
"States.HouseAt":{"prefix":"States.HouseAt","body":["States.HouseAt(${01:aX:Integer}, ${11:aY:Integer});"],"description":"Returns the ID of the house at the specified location or -1 if no house exists there\nReturns: Integer // House ID\nversion: 5057"},
"States.HouseBarracksRallyPointX":{"prefix":"States.HouseBarracksRallyPointX","body":["States.HouseBarracksRallyPointX(${01:aBarracks:Integer});"],"description":"Returns X coordinate of Rally Point of specified barracks or 0 if BarracksID is invalid\nReturns: Integer // X coordinate\nversion: 6516"},
"States.HouseBarracksRallyPointY":{"prefix":"States.HouseBarracksRallyPointY","body":["States.HouseBarracksRallyPointY(${01:aBarracks:Integer});"],"description":"Returns Y coordinate of Rally Point of specified barracks or 0 if BarracksID is invalid\nReturns: Integer // Y coordinate\nversion: 6516"},
"States.HouseBuildingProgress":{"prefix":"States.HouseBuildingProgress","body":["States.HouseBuildingProgress(${01:aHouseID:Integer});"],"description":"Returns building progress of the specified house\nReturns: Word // Building progress\nversion: 6285"},
"States.HouseCanReachResources":{"prefix":"States.HouseCanReachResources","body":["States.HouseCanReachResources(${01:aHouseID:Integer});"],"description":"Returns true if the specified house can reach the resources that it mines (coal, stone, fish, etc.)\nReturns: Boolean // Reachable\nversion: 5993"},
"States.HouseDamage":{"prefix":"States.HouseDamage","body":["States.HouseDamage(${01:aHouseID:Integer});"],"description":"Returns the damage of the specified house or -1 if House ID invalid\nReturns: Integer // House damage\nversion: 5057"},
"States.HouseDeliveryBlocked":{"prefix":"States.HouseDeliveryBlocked","body":["States.HouseDeliveryBlocked(${01:aHouseID:Integer});"],"description":"Returns true if the specified house has delivery disabled\nReturns: Boolean // Blocked\nversion: 5057"},
"States.HouseDestroyed":{"prefix":"States.HouseDestroyed","body":["States.HouseDestroyed(${01:aHouseID:Integer});"],"description":"Returns true if the house is destroyed\nReturns: Boolean // Destroyed\nversion: 5057"},
"States.HouseHasOccupant":{"prefix":"States.HouseHasOccupant","body":["States.HouseHasOccupant(${01:aHouseID:Integer});"],"description":"Returns true if the specified house currently has an occupant\nReturns: Boolean // Has occupant\nversion: 5057"},
"States.HouseIsComplete":{"prefix":"States.HouseIsComplete","body":["States.HouseIsComplete(${01:aHouseID:Integer});"],"description":"Returns true if the specified house is fully built\nReturns: Boolean\nversion: 5345"},
"States.HouseOwner":{"prefix":"States.HouseOwner","body":["States.HouseOwner(${01:aHouseID:Integer});"],"description":"Returns the owner of the specified house or -1 if House ID invalid\nReturns: Integer // Player ID\nversion: 5057"},
"States.HousePositionX":{"prefix":"States.HousePositionX","body":["States.HousePositionX(${01:aHouseID:Integer});"],"description":"Returns the X coordinate of the specified house or -1 if House ID invalid\nReturns: Integer // X coordinate\nversion: 5057"},
"States.HousePositionY":{"prefix":"States.HousePositionY","body":["States.HousePositionY(${01:aHouseID:Integer});"],"description":"Returns the Y coordinate of the specified house or -1 if House ID invalid\nReturns: Integer // Y coordinate\nversion: 5057"},
"States.HouseRepair":{"prefix":"States.HouseRepair","body":["States.HouseRepair(${01:aHouseID:Integer});"],"description":"Returns true if the specified house has repair enabled\nReturns: Boolean // Repair enabled\nversion: 5057"},
"States.HouseResourceAmount":{"prefix":"States.HouseResourceAmount","body":["States.HouseResourceAmount(${01:aHouseID:Integer}, ${11:aResource:Integer});"],"description":"Returns the amount of the specified resource in the specified house\nReturns: Integer // Number of resources\nversion: 5057"},
"States.HouseSchoolQueue":{"prefix":"States.HouseSchoolQueue","body":["States.HouseSchoolQueue(${01:aHouseID:Integer}, ${11:QueueIndex:Integer-Queue index (0..5)});"],"description":"Returns the unit type in the specified slot of the school queue. Slot 0 is the unit currently training, slots 1..5 are the queue.\nReturns: Integer // Unit type\nversion: 5165"},
"States.HouseSiteIsDigged":{"prefix":"States.HouseSiteIsDigged","body":["States.HouseSiteIsDigged(${01:aHouseID:Integer});"],"description":"Returns true if specified WIP house area is digged\nReturns: Boolean // Digged\nversion: 6510"},
"States.HouseType":{"prefix":"States.HouseType","body":["States.HouseType(${01:aHouseID:Integer});"],"description":"Returns the type of the specified house\nReturns: Integer // House type\nversion: 5057"},
"States.HouseTypeMaxHealth":{"prefix":"States.HouseTypeMaxHealth","body":["States.HouseTypeMaxHealth(${01:aHouseType:Integer});"],"description":"Returns max health of the specified house type\nReturns: Word // Max health\nversion: 6284"},
"States.HouseTypeName":{"prefix":"States.HouseTypeName","body":["States.HouseTypeName(${01:aHouseType:Byte});"],"description":"Returns the the translated name of the specified house type. Note: To ensure multiplayer consistency the name is returned as a number encoded within a markup which is decoded on output, not the actual translated text. Therefore string operations like !LowerCase will not work.\nReturns: AnsiString // House type name\nversion: 6001"},
"States.HouseTypeToOccupantType":{"prefix":"States.HouseTypeToOccupantType","body":["States.HouseTypeToOccupantType(${01:aHouseType:Integer});"],"description":"Returns the type of unit that should occupy the specified type of house, or -1 if no unit should occupy it.\nReturns: Integer // Unit type\nversion: 5345"},
"States.HouseUnlocked":{"prefix":"States.HouseUnlocked","body":["States.HouseUnlocked(${01:aPlayer:Integer}, ${11:aHouseType:Integer});"],"description":"Returns true if the specified player can build the specified house type (unlocked and allowed).\nReturns: Boolean // House unlocked\nversion: 6220"},
"States.HouseWareBlocked":{"prefix":"States.HouseWareBlocked","body":["States.HouseWareBlocked(${01:aHouseID:Integer}, ${11:aWareType:Integer});"],"description":"Returns true if the specified ware in the specified storehouse or barracks is blocked\nReturns: Boolean // Ware blocked\nversion: 5099"},
"States.HouseWeaponsOrdered":{"prefix":"States.HouseWeaponsOrdered","body":["States.HouseWeaponsOrdered(${01:aHouseID:Integer}, ${11:aWareType:Integer});"],"description":"Returns the number of the specified weapon ordered to be produced in the specified house\nReturns: Integer // Number of ordered weapons\nversion: 5165"},
"States.HouseWoodcutterChopOnly":{"prefix":"States.HouseWoodcutterChopOnly","body":["States.HouseWoodcutterChopOnly(${01:aHouseID:Integer});"],"description":"Returns true if the specified woodcutter's hut is on chop-only mode\nReturns: Boolean // Chop-only\nversion: 5099"},
"States.IsFieldAt":{"prefix":"States.IsFieldAt","body":["States.IsFieldAt(${01:aPlayer:Shortint}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Returns true if the specified player has a corn field at the specified location. If player index is -1 it will return true if any player has a corn field at the specified tile\nReturns: Boolean // Is field\nversion: 5345"},
"States.IsRoadAt":{"prefix":"States.IsRoadAt","body":["States.IsRoadAt(${01:aPlayer:Shortint}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Returns true if the specified player has a road at the specified location. If player index is -1 it will return true if any player has a road at the specified tile\nReturns: Boolean // Is road\nversion: 5345"},
"States.IsWinefieldAt":{"prefix":"States.IsWinefieldAt","body":["States.IsWinefieldAt(${01:aPlayer:Shortint}, ${11:X:Integer}, ${21:Y:Integer});"],"description":"Returns true if the specified player has a winefield at the specified location. If player index is -1 it will return true if any player has a winefield at the specified tile\nReturns: Boolean // Is winefield\nversion: 5345"},
"States.KaMRandom":{"prefix":"States.KaMRandom","body":["States.KaMRandom();"],"description":"Returns a random single (float) such that: 0 <= Number < 1.0\nReturns: Single // Decimal number 0.0 to 1.0\nversion: 6216"},
"States.KaMRandomI":{"prefix":"States.KaMRandomI","body":["States.KaMRandomI(${01:aMax:Integer});"],"description":"Returns a random integer such that: 0 <= Number\nReturns: Integer // Number 0 to aMax\nversion: 6216"},
"States.LocationCount":{"prefix":"States.LocationCount","body":["States.LocationCount();"],"description":"Returns the number of player locations available on the map (including AIs), regardless of whether the location was taken in multiplayer (use !PlayerEnabled to check if a location is being used)\nReturns: Integer // Number of locations\nversion: 6611"},
"States.MapHeight":{"prefix":"States.MapHeight","body":["States.MapHeight();"],"description":"Returns the height of the map\nReturns: Integer // Height\nversion: 6613"},
"States.MapTileHeight":{"prefix":"States.MapTileHeight","body":["States.MapTileHeight(${01:X:Integer}, ${11:Y:Integer});"],"description":"Returns the height of the terrain at the top left corner (vertex) of the tile at the specified XY coordinates.\nReturns: Integer // Height (0..100)\nversion: 6587"},
"States.MapTileObject":{"prefix":"States.MapTileObject","body":["States.MapTileObject(${01:X:Integer}, ${11:Y:Integer});"],"description":"Returns the terrain object ID on the tile at the specified XY coordinates. Object IDs can be seen in the map editor on the objects tab. Object 61 is \"block walking\". If there is no object on the tile, the result will be 255.\nReturns: Integer // Object type (0..255)\nversion: 6587"},
"States.MapTileRotation":{"prefix":"States.MapTileRotation","body":["States.MapTileRotation(${01:X:Integer}, ${11:Y:Integer});"],"description":"Returns the rotation of the tile at the specified XY coordinates.\nReturns: Integer // Rotation (0..3)\nversion: 6587"},
"States.MapTileType":{"prefix":"States.MapTileType","body":["States.MapTileType(${01:X:Integer}, ${11:Y:Integer});"],"description":"Returns the tile type ID of the tile at the specified XY coordinates. Tile IDs can be seen by hovering over the tiles on the terrain tiles tab in the map editor.\nReturns: Integer // Tile type (0..255)\nversion: 6587"},
"States.MapWidth":{"prefix":"States.MapWidth","body":["States.MapWidth();"],"description":"Returns the width of the map\nReturns: Integer // Width\nversion: 6613"},
"States.MarketFromWare":{"prefix":"States.MarketFromWare","body":["States.MarketFromWare(${01:aMarketID:Integer});"],"description":"Returns type of !FromWare in specified market, or -1 if no ware is selected\nReturns: Integer // Ware type\nversion: 6287"},
"States.MarketLossFactor":{"prefix":"States.MarketLossFactor","body":["States.MarketLossFactor();"],"description":"Returns the factor of resources lost during market trading, used to calculate the !TradeRatio (see explanation in MarketValue). This value is constant within one KaM Remake release, but may change in future KaM Remake releases\nReturns: Single // Loss factor\nversion: 6217"},
"States.MarketOrderAmount":{"prefix":"States.MarketOrderAmount","body":["States.MarketOrderAmount(${01:aMarketID:Integer});"],"description":"Returns trade order amount in specified market\nReturns: Integer // Order amount\nversion: 6287"},
"States.MarketToWare":{"prefix":"States.MarketToWare","body":["States.MarketToWare(${01:aMarketID:Integer});"],"description":"Returns type of !ToWare in specified market, or -1 if no ware is selected\nReturns: Integer // Ware type\nversion: 6287"},
"States.MarketValue":{"prefix":"States.MarketValue","body":["States.MarketValue(${01:aRes:Integer});"],"description":"Returns the relative market value of the specified resource type, which is a rough indication of the cost to produce that resource. These values are constant within one KaM Remake release, but may change in future KaM Remake releases. The !TradeRatio is calculated as: MarketLossFactor * MarketValue(To) / (MarketValue(From). If the !TradeRatio is >= 1, then the number of From resources required to receive 1 To resource is: Round(TradeRatio). If the trade ratio is < 1 then the number of To resources received for trading 1 From resource is: Round(1 / TradeRatio)\nReturns: Single // Value\nversion: 6216"},
"States.PeaceTime":{"prefix":"States.PeaceTime","body":["States.PeaceTime();"],"description":"Length of peacetime in ticks (multiplayer)\nReturns: Cardinal // Ticks (~10 per second)\nversion: 5057"},
"States.PlayerAllianceCheck":{"prefix":"States.PlayerAllianceCheck","body":["States.PlayerAllianceCheck(${01:aPlayer1:Byte}, ${11:aPlayer2:Byte});"],"description":"Check how player 1 feels towards player 2 (order matters). Returns true for ally, false for enemy\nReturns: Boolean // Allied\nversion: 5057"},
"States.PlayerColorText":{"prefix":"States.PlayerColorText","body":["States.PlayerColorText(${01:aPlayer:Byte});"],"description":"Get players color as text in hex format\nReturns: AnsiString // Player color\nversion: 4758"},
"States.PlayerDefeated":{"prefix":"States.PlayerDefeated","body":["States.PlayerDefeated(${01:aPlayer:Byte});"],"description":"See if player was defeated\nReturns: Boolean // Defeated\nversion: 5057"},
"States.PlayerEnabled":{"prefix":"States.PlayerEnabled","body":["States.PlayerEnabled(${01:aPlayer:Byte});"],"description":"Will be false if nobody selected that location in multiplayer\nReturns: Boolean // Enabled\nversion: 5057"},
"States.PlayerGetAllGroups":{"prefix":"States.PlayerGetAllGroups","body":["States.PlayerGetAllGroups(${01:aPlayer:Byte});"],"description":"Returns an array with IDs for all the groups of the specified player\nReturns: array of Integer // Array of group IDs\nversion: 5209"},
"States.PlayerGetAllHouses":{"prefix":"States.PlayerGetAllHouses","body":["States.PlayerGetAllHouses(${01:aPlayer:Byte});"],"description":"Returns an array with IDs for all the houses of the specified player\nReturns: array of Integer // Array of house IDs\nversion: 5209"},
"States.PlayerGetAllUnits":{"prefix":"States.PlayerGetAllUnits","body":["States.PlayerGetAllUnits(${01:aPlayer:Byte});"],"description":"Returns an array with IDs for all the units of the specified player\nReturns: array of Integer // Array of unit IDs\nversion: 5165"},
"States.PlayerIsAI":{"prefix":"States.PlayerIsAI","body":["States.PlayerIsAI(${01:aPlayer:Byte});"],"description":"Wherever player is controlled by AI\nReturns: Boolean // Player is AI\nversion: 5927"},
"States.PlayerName":{"prefix":"States.PlayerName","body":["States.PlayerName(${01:aPlayer:Byte});"],"description":"Get name of player as a string (for multiplayer)\nReturns: AnsiString // Player name\nversion: 5057"},
"States.PlayerVictorious":{"prefix":"States.PlayerVictorious","body":["States.PlayerVictorious(${01:aPlayer:Byte});"],"description":"See if player is victorious\nReturns: Boolean // Victorious\nversion: 4545"},
"States.PlayerWareDistribution":{"prefix":"States.PlayerWareDistribution","body":["States.PlayerWareDistribution(${01:aPlayer:Byte}, ${11:aWareType:Byte}, ${21:aHouseType:Byte});"],"description":"Returns the ware distribution for the specified resource, house and player\nReturns: Byte // Ware distribution [0..5]\nversion: 5345"},
"States.StatAIDefencePositionsCount":{"prefix":"States.StatAIDefencePositionsCount","body":["States.StatAIDefencePositionsCount(${01:aPlayer:Byte});"],"description":"How many defence positions AI player has. Useful for scripts like \"if not enough positions and too much groups then add a new position\"\nReturns: Integer // Defence position count\nversion: 6323"},
"States.StatArmyCount":{"prefix":"States.StatArmyCount","body":["States.StatArmyCount(${01:aPlayer:Byte});"],"description":"How many military units player has\nReturns: Integer // Army count\nversion: 5057"},
"States.StatCitizenCount":{"prefix":"States.StatCitizenCount","body":["States.StatCitizenCount(${01:aPlayer:Byte});"],"description":"How many citizen player has\nReturns: Integer // Citizen count\nversion: 5057"},
"States.StatHouseMultipleTypesCount":{"prefix":"States.StatHouseMultipleTypesCount","body":["States.StatHouseMultipleTypesCount(${01:aPlayer:Byte}, ${11:aTypes:set of Byte-House types eg. [11, 13, 21]});"],"description":"Returns number of specified house types for specified player.\nReturns: Integer // Total number of houses\nversion: 6328"},
"States.StatHouseTypeCount":{"prefix":"States.StatHouseTypeCount","body":["States.StatHouseTypeCount(${01:aPlayer:Byte}, ${11:aHouseType:Byte});"],"description":"Returns the total number of the specified house type for the specified player.\nReturns: Integer // Number of houses\nversion: 5057"},
"States.StatHouseTypePlansCount":{"prefix":"States.StatHouseTypePlansCount","body":["States.StatHouseTypePlansCount(${01:aPlayer:Byte}, ${11:aHouseType:Byte});"],"description":"Specified house type plans count\nReturns: Integer // Number of plans\nversion: 6313"},
"States.StatPlayerCount":{"prefix":"States.StatPlayerCount","body":["States.StatPlayerCount();"],"description":"How many active players there are.\nReturns: Integer // Number of players\nversion: 5057"},
"States.StatResourceProducedCount":{"prefix":"States.StatResourceProducedCount","body":["States.StatResourceProducedCount(${01:aPlayer:Byte}, ${11:aResType:Byte});"],"description":"Returns the number of the specified resource produced by the specified player\nReturns: Integer // Number of produced resources\nversion: 5057"},
"States.StatResourceProducedMultipleTypesCount":{"prefix":"States.StatResourceProducedMultipleTypesCount","body":["States.StatResourceProducedMultipleTypesCount(${01:aPlayer:Byte}, ${11:aTypes:set of Byte-Set of ware types eg. [8, 10, 13, 27] for food});"],"description":"Returns the number of the specified resource types produced by the specified player.\nReturns: Integer // Number of produced resources\nversion: 6331"},
"States.StatUnitCount":{"prefix":"States.StatUnitCount","body":["States.StatUnitCount(${01:aPlayer:Byte});"],"description":"Returns the number of units of the specified player\nReturns: Integer // Number of units\nversion: 4289"},
"States.StatUnitKilledCount":{"prefix":"States.StatUnitKilledCount","body":["States.StatUnitKilledCount(${01:aPlayer:Byte}, ${11:aUnitType:Byte});"],"description":"Returns the number of the specified unit killed by the specified player\nReturns: Integer // Number of killed units\nversion: 5057"},
"States.StatUnitKilledMultipleTypesCount":{"prefix":"States.StatUnitKilledMultipleTypesCount","body":["States.StatUnitKilledMultipleTypesCount(${01:aPlayer:Byte}, ${11:aTypes:set of Byte});"],"description":"Returns the number of the specified unit types killed by the specified player.\nReturns: Integer // Set of unit types eg. [0, 5, 13]\nversion: 6331"},
"States.StatUnitLostCount":{"prefix":"States.StatUnitLostCount","body":["States.StatUnitLostCount(${01:aPlayer:Byte}, ${11:aUnitType:Byte});"],"description":"Returns the number of the specified unit lost by the specified player\nReturns: Integer // Number of lost units\nversion: 5057"},
"States.StatUnitLostMultipleTypesCount":{"prefix":"States.StatUnitLostMultipleTypesCount","body":["States.StatUnitLostMultipleTypesCount(${01:aPlayer:Byte}, ${11:aTypes:set of Byte-Set of unit types eg. [0, 5, 13]});"],"description":"Returns the number of the specified unit types lost by the specified player.\nReturns: Integer // Number of lost units\nversion: 6331"},
"States.StatUnitMultipleTypesCount":{"prefix":"States.StatUnitMultipleTypesCount","body":["States.StatUnitMultipleTypesCount(${01:aPlayer:Byte}, ${11:aTypes:set of Byte-Set of unit types eg. [0, 5, 13]});"],"description":"Returns number of specified unit types for specified player.\nReturns: Integer // Total number of  units\nversion: 6328"},
"States.StatUnitTypeCount":{"prefix":"States.StatUnitTypeCount","body":["States.StatUnitTypeCount(${01:aPlayer:Byte}, ${11:aUnitType:Byte});"],"description":"Returns number of specified unit type for specified player\nReturns: Integer // Number of units\nversion: 5057"},
"States.UnitAt":{"prefix":"States.UnitAt","body":["States.UnitAt(${01:aX:Integer}, ${11:aY:Integer});"],"description":"Returns the ID of the unit on the specified tile or -1 if no unit exists there\nReturns: Integer // Unit ID\nversion: 5057"},
"States.UnitCarrying":{"prefix":"States.UnitCarrying","body":["States.UnitCarrying(${01:aUnitID:Integer});"],"description":"Returns the ware a serf is carrying, or -1 if the unit is not a serf or is not carrying anything\nReturns: Integer // Ware type\nversion: 5057"},
"States.UnitDead":{"prefix":"States.UnitDead","body":["States.UnitDead(${01:aUnitID:Integer});"],"description":"Returns true if the unit is dead\nReturns: Boolean // Dead\nversion: 5057"},
"States.UnitDirection":{"prefix":"States.UnitDirection","body":["States.UnitDirection(${01:aUnitID:Integer});"],"description":"Returns the direction the specified unit is facing\nReturns: Integer // Direction (0..7)\nversion: 5165"},
"States.UnitHome":{"prefix":"States.UnitHome","body":["States.UnitHome(${01:aUnitID:Integer});"],"description":"Returns the ID of the house which is the home of the specified unit or -1 if the unit does not have a home\nReturns: Integer // House ID\nversion: 5997"},
"States.UnitHunger":{"prefix":"States.UnitHunger","body":["States.UnitHunger(${01:aUnitID:Integer});"],"description":"Returns the hunger level of the specified unit as number of ticks until death or -1 if Unit ID invalid\nReturns: Integer // Hunger\nversion: 5057"},
"States.UnitIdle":{"prefix":"States.UnitIdle","body":["States.UnitIdle(${01:aUnitID:Integer});"],"description":"Returns true if specified unit is idle (has no orders/action)\nReturns: Boolean // Idle\nversion: 6523"},
"States.UnitLowHunger":{"prefix":"States.UnitLowHunger","body":["States.UnitLowHunger();"],"description":"Gives the hunger level when a unit will try to eat in ticks until death\nReturns: Integer // Hunger in ticks\nversion: 5057"},
"States.UnitMaxHunger":{"prefix":"States.UnitMaxHunger","body":["States.UnitMaxHunger();"],"description":"Gives the maximum hunger level a unit can have in ticks until death\nReturns: Integer // Hunger in ticks\nversion: 5057"},
"States.UnitOwner":{"prefix":"States.UnitOwner","body":["States.UnitOwner(${01:aUnitID:Integer});"],"description":"Returns the owner of the specified unit or -1 if Unit ID invalid\nReturns: Integer // Player ID\nversion: 5057"},
"States.UnitPositionX":{"prefix":"States.UnitPositionX","body":["States.UnitPositionX(${01:aUnitID:Integer});"],"description":"Returns the X coordinate of the specified unit or -1 if Unit ID invalid\nReturns: Integer // X coordinate\nversion: 5057"},
"States.UnitPositionY":{"prefix":"States.UnitPositionY","body":["States.UnitPositionY(${01:aUnitID:Integer});"],"description":"Returns the Y coordinate of the specified unit or -1 if Unit ID invalid\nReturns: Integer // Y coordinate\nversion: 5057"},
"States.UnitsGroup":{"prefix":"States.UnitsGroup","body":["States.UnitsGroup(${01:aUnitID:Integer});"],"description":"Returns the group that the specified unit (warrior) belongs to or -1 if it does not belong to a group\nReturns: Integer // Group ID\nversion: 5057"},
"States.UnitType":{"prefix":"States.UnitType","body":["States.UnitType(${01:aUnitID:Integer});"],"description":"Returns the type of the specified unit\nReturns: Integer // Unit type\nversion: 5057"},
"States.UnitTypeName":{"prefix":"States.UnitTypeName","body":["States.UnitTypeName(${01:aUnitType:Byte});"],"description":"Returns the the translated name of the specified unit type. Note: To ensure multiplayer consistency the name is returned as a number encoded within a markup which is decoded on output, not the actual translated text. Therefore string operations like !LowerCase will not work.\nReturns: AnsiString // Unit type name\nversion: 6001"},
"States.WareTypeName":{"prefix":"States.WareTypeName","body":["States.WareTypeName(${01:aWareType:Byte});"],"description":"Returns the the translated name of the specified ware type. Note: To ensure multiplayer consistency the name is returned as a number encoded within a markup which is decoded on output, not the actual translated text. Therefore string operations like !LowerCase will not work.\nReturns: AnsiString // Ware type name\nversion: 6001"},

"UnitType.Serf":{"prefix":"UnitType.Serf","body":["0(* Serf *)"],"description":"Serf: 0"},
"UnitType.Woodcutter":{"prefix":"UnitType.Woodcutter","body":["1(* Woodcutter *)"],"description":"Woodcutter: 1"},
"UnitType.Miner":{"prefix":"UnitType.Miner","body":["2(* Miner *)"],"description":"Miner: 2"},
"UnitType.AnimalBreeder":{"prefix":"UnitType.AnimalBreeder","body":["3(* Animal Breeder *)"],"description":"Animal Breeder: 3"},
"UnitType.Farmer":{"prefix":"UnitType.Farmer","body":["4(* Farmer *)"],"description":"Farmer: 4"},
"UnitType.Carpenter":{"prefix":"UnitType.Carpenter","body":["5(* Carpenter *)"],"description":"Carpenter: 5"},
"UnitType.Baker":{"prefix":"UnitType.Baker","body":["6(* Baker *)"],"description":"Baker: 6"},
"UnitType.Butcher":{"prefix":"UnitType.Butcher","body":["7(* Butcher *)"],"description":"Butcher: 7"},
"UnitType.Fisherman":{"prefix":"UnitType.Fisherman","body":["8(* Fisherman *)"],"description":"Fisherman: 8"},
"UnitType.Laborer":{"prefix":"UnitType.Laborer","body":["9(* Laborer *)"],"description":"Laborer: 9"},
"UnitType.StoneMason":{"prefix":"UnitType.StoneMason","body":["10(* Stone Mason *)"],"description":"Stone Mason: 10"},
"UnitType.Blacksmith":{"prefix":"UnitType.Blacksmith","body":["11(* Blacksmith *)"],"description":"Blacksmith: 11"},
"UnitType.Metallurgist":{"prefix":"UnitType.Metallurgist","body":["12(* Metallurgist *)"],"description":"Metallurgist: 12"},
"UnitType.Recruit":{"prefix":"UnitType.Recruit","body":["13(* Recruit *)"],"description":"Recruit: 13"},
"UnitType.Militia":{"prefix":"UnitType.Militia","body":["14(* Militia *)"],"description":"Militia: 14"},
"UnitType.AxeFighter":{"prefix":"UnitType.AxeFighter","body":["15(* Axe Fighter *)"],"description":"Axe Fighter: 15"},
"UnitType.SwordFighter":{"prefix":"UnitType.SwordFighter","body":["16(* Sword Fighter *)"],"description":"Sword Fighter: 16"},
"UnitType.Bowman":{"prefix":"UnitType.Bowman","body":["17(* Bowman *)"],"description":"Bowman: 17"},
"UnitType.Crossbowman":{"prefix":"UnitType.Crossbowman","body":["18(* Crossbowman *)"],"description":"Crossbowman: 18"},
"UnitType.LanceCarrier":{"prefix":"UnitType.LanceCarrier","body":["19(* Lance Carrier *)"],"description":"Lance Carrier: 19"},
"UnitType.Pikeman":{"prefix":"UnitType.Pikeman","body":["20(* Pikeman *)"],"description":"Pikeman: 20"},
"UnitType.Scout":{"prefix":"UnitType.Scout","body":["21(* Scout *)"],"description":"Scout: 21"},
"UnitType.Knight":{"prefix":"UnitType.Knight","body":["22(* Knight *)"],"description":"Knight: 22"},
"UnitType.Barbarian":{"prefix":"UnitType.Barbarian","body":["23(* Barbarian *)"],"description":"Barbarian: 23"},
"UnitType.Rebel":{"prefix":"UnitType.Rebel","body":["24(* Rebel *)"],"description":"Rebel: 24"},
"UnitType.Rogue":{"prefix":"UnitType.Rogue","body":["25(* Rogue *)"],"description":"Rogue: 25"},
"UnitType.Warrior":{"prefix":"UnitType.Warrior","body":["26(* Warrior *)"],"description":"Warrior: 26"},
"UnitType.Vagabond":{"prefix":"UnitType.Vagabond","body":["27(* Vagabond *)"],"description":"Vagabond: 27"},
"UnitType.Wolf":{"prefix":"UnitType.Wolf","body":["30(* Wolf *)"],"description":"Wolf: 30"},
"UnitType.Fish":{"prefix":"UnitType.Fish","body":["31(* Fish *)"],"description":"Fish: 31"},
"UnitType.Seasnake":{"prefix":"UnitType.Seasnake","body":["32(* Seasnake *)"],"description":"Seasnake: 32"},
"UnitType.Seastar":{"prefix":"UnitType.Seastar","body":["33(* Seastar *)"],"description":"Seastar: 33"},
"UnitType.Crab":{"prefix":"UnitType.Crab","body":["34(* Crab *)"],"description":"Crab: 34"},
"UnitType.WaterFlower":{"prefix":"UnitType.WaterFlower","body":["35(* Water flower *)"],"description":"Water flower: 35"},
"UnitType.WaterLeaf":{"prefix":"UnitType.WaterLeaf","body":["36(* Water leaf *)"],"description":"Water leaf: 36"},
"UnitType.Duck":{"prefix":"UnitType.Duck","body":["37(* Duck *)"],"description":"Duck: 37"},

"HouseType.Sawmill":{"prefix":"HouseType.Sawmill","body":["0(* Sawmill *)"],"description":"Sawmill: 0"},
"HouseType.IronSmithy":{"prefix":"HouseType.IronSmithy","body":["1(* Iron Smithy *)"],"description":"Iron Smithy: 1"},
"HouseType.WeaponSmithy":{"prefix":"HouseType.WeaponSmithy","body":["2(* Weapon Smithy *)"],"description":"Weapon Smithy: 2"},
"HouseType.CoalMine":{"prefix":"HouseType.CoalMine","body":["3(* Coal Mine *)"],"description":"Coal Mine: 3"},
"HouseType.IronMine":{"prefix":"HouseType.IronMine","body":["4(* Iron Mine *)"],"description":"Iron Mine: 4"},
"HouseType.GoldMine":{"prefix":"HouseType.GoldMine","body":["5(* Gold Mine *)"],"description":"Gold Mine: 5"},
"HouseType.Fisherman'sHut":{"prefix":"HouseType.Fisherman'sHut","body":["6(* Fisherman's Hut *)"],"description":"Fisherman's Hut: 6"},
"HouseType.Bakery":{"prefix":"HouseType.Bakery","body":["7(* Bakery *)"],"description":"Bakery: 7"},
"HouseType.Farm":{"prefix":"HouseType.Farm","body":["8(* Farm *)"],"description":"Farm: 8"},
"HouseType.Woodcutter's":{"prefix":"HouseType.Woodcutter's","body":["9(* Woodcutter's *)"],"description":"Woodcutter's: 9"},
"HouseType.ArmorSmithy":{"prefix":"HouseType.ArmorSmithy","body":["10(* Armor Smithy *)"],"description":"Armor Smithy: 10"},
"HouseType.Storehouse":{"prefix":"HouseType.Storehouse","body":["11(* Storehouse *)"],"description":"Storehouse: 11"},
"HouseType.Stables":{"prefix":"HouseType.Stables","body":["12(* Stables *)"],"description":"Stables: 12"},
"HouseType.SchoolHouse":{"prefix":"HouseType.SchoolHouse","body":["13(* School House *)"],"description":"School House: 13"},
"HouseType.Quarry":{"prefix":"HouseType.Quarry","body":["14(* Quarry *)"],"description":"Quarry: 14"},
"HouseType.Metallurgist's":{"prefix":"HouseType.Metallurgist's","body":["15(* Metallurgist's *)"],"description":"Metallurgist's: 15"},
"HouseType.SwineFarm":{"prefix":"HouseType.SwineFarm","body":["16(* Swine farm *)"],"description":"Swine farm: 16"},
"HouseType.WatchTower":{"prefix":"HouseType.WatchTower","body":["17(* Watch Tower *)"],"description":"Watch Tower: 17"},
"HouseType.TownHall":{"prefix":"HouseType.TownHall","body":["18(* Town Hall *)"],"description":"Town Hall: 18"},
"HouseType.WeaponsWorkshop":{"prefix":"HouseType.WeaponsWorkshop","body":["19(* Weapons Workshop *)"],"description":"Weapons Workshop: 19"},
"HouseType.ArmoryWorkshop":{"prefix":"HouseType.ArmoryWorkshop","body":["20(* Armory Workshop *)"],"description":"Armory Workshop: 20"},
"HouseType.Barracks":{"prefix":"HouseType.Barracks","body":["21(* Barracks *)"],"description":"Barracks: 21"},
"HouseType.Mill":{"prefix":"HouseType.Mill","body":["22(* Mill *)"],"description":"Mill: 22"},
"HouseType.VehiclesWorkshop":{"prefix":"HouseType.VehiclesWorkshop","body":["23(* Vehicles Workshop *)"],"description":"Vehicles Workshop: 23"},
"HouseType.Butcher's":{"prefix":"HouseType.Butcher's","body":["24(* Butcher's *)"],"description":"Butcher's: 24"},
"HouseType.Tannery":{"prefix":"HouseType.Tannery","body":["25(* Tannery *)"],"description":"Tannery: 25"},
"HouseType.Unused":{"prefix":"HouseType.Unused","body":["26(* Unused *)"],"description":"Unused: 26"},
"HouseType.Inn":{"prefix":"HouseType.Inn","body":["27(* Inn *)"],"description":"Inn: 27"},
"HouseType.Vineyard":{"prefix":"HouseType.Vineyard","body":["28(* Vineyard *)"],"description":"Vineyard: 28"},
"HouseType.Market":{"prefix":"HouseType.Market","body":["29(* Market *)"],"description":"Market: 29"},

"WareType.TreeTrunk":{"prefix":"WareType.TreeTrunk","body":["0(* Tree trunk *)"],"description":"Tree trunk: 0"},
"WareType.Stone":{"prefix":"WareType.Stone","body":["1(* Stone *)"],"description":"Stone: 1"},
"WareType.Timber":{"prefix":"WareType.Timber","body":["2(* Timber *)"],"description":"Timber: 2"},
"WareType.IronOre":{"prefix":"WareType.IronOre","body":["3(* Iron ore *)"],"description":"Iron ore: 3"},
"WareType.GoldOre":{"prefix":"WareType.GoldOre","body":["4(* Gold ore *)"],"description":"Gold ore: 4"},
"WareType.Coal":{"prefix":"WareType.Coal","body":["5(* Coal *)"],"description":"Coal: 5"},
"WareType.Iron":{"prefix":"WareType.Iron","body":["6(* Iron *)"],"description":"Iron: 6"},
"WareType.Gold":{"prefix":"WareType.Gold","body":["7(* Gold *)"],"description":"Gold: 7"},
"WareType.Wine":{"prefix":"WareType.Wine","body":["8(* Wine *)"],"description":"Wine: 8"},
"WareType.Corn":{"prefix":"WareType.Corn","body":["9(* Corn *)"],"description":"Corn: 9"},
"WareType.Loaves":{"prefix":"WareType.Loaves","body":["10(* Loaves *)"],"description":"Loaves: 10"},
"WareType.Flour":{"prefix":"WareType.Flour","body":["11(* Flour *)"],"description":"Flour: 11"},
"WareType.Leather":{"prefix":"WareType.Leather","body":["12(* Leather *)"],"description":"Leather: 12"},
"WareType.Sausages":{"prefix":"WareType.Sausages","body":["13(* Sausages *)"],"description":"Sausages: 13"},
"WareType.Pig":{"prefix":"WareType.Pig","body":["14(* Pig *)"],"description":"Pig: 14"},
"WareType.Skin":{"prefix":"WareType.Skin","body":["15(* Skin *)"],"description":"Skin: 15"},
"WareType.WoodenShield":{"prefix":"WareType.WoodenShield","body":["16(* Wooden Shield *)"],"description":"Wooden Shield: 16"},
"WareType.LongShield":{"prefix":"WareType.LongShield","body":["17(* Long Shield *)"],"description":"Long Shield: 17"},
"WareType.LeatherArmor":{"prefix":"WareType.LeatherArmor","body":["18(* Leather Armor *)"],"description":"Leather Armor: 18"},
"WareType.IronArmament":{"prefix":"WareType.IronArmament","body":["19(* Iron Armament *)"],"description":"Iron Armament: 19"},
"WareType.Handaxe":{"prefix":"WareType.Handaxe","body":["20(* Handaxe *)"],"description":"Handaxe: 20"},
"WareType.Longsword":{"prefix":"WareType.Longsword","body":["21(* Longsword *)"],"description":"Longsword: 21"},
"WareType.Lance":{"prefix":"WareType.Lance","body":["22(* Lance *)"],"description":"Lance: 22"},
"WareType.Pike":{"prefix":"WareType.Pike","body":["23(* Pike *)"],"description":"Pike: 23"},
"WareType.Longbow":{"prefix":"WareType.Longbow","body":["24(* Longbow *)"],"description":"Longbow: 24"},
"WareType.Crossbow":{"prefix":"WareType.Crossbow","body":["25(* Crossbow *)"],"description":"Crossbow: 25"},
"WareType.Horse":{"prefix":"WareType.Horse","body":["26(* Horse *)"],"description":"Horse: 26"},
"WareType.Fish":{"prefix":"WareType.Fish","body":["27(* Fish *)"],"description":"Fish: 27"},

"GroupType.Melee":{"prefix":"GroupType.Melee","body":["0(* Melee *)"],"description":"Melee: 0"},
"GroupType.Anti-horse":{"prefix":"GroupType.Anti-horse","body":["1(* Anti-horse *)"],"description":"Anti-horse: 1"},
"GroupType.Ranged":{"prefix":"GroupType.Ranged","body":["2(* Ranged *)"],"description":"Ranged: 2"},
"GroupType.Mounted":{"prefix":"GroupType.Mounted","body":["3(* Mounted *)"],"description":"Mounted: 3"}
}